# Importação das bibliotecas necessárias
import json
import csv
import time

# Variável com o caminho para o arquivo JSON
automato_json = 'AFD.json'

# Abertura do arquivo JSON para leitura e carregamento dos dados para a variável dados, utilizando json.load()
with open(automato_json, 'r') as automato:
    dados = json.load(automato)

# Criação do dicionário vazio para armazenar as transições
transitions = {}
# Dentro do loop for, é extraído o estado de origem, estado de destino e a entrada lida
# Caso a entrada consista em várias letras separadas por vírgulas, são divididas em lista usando a função split()
# Cada combinação de estado de origem e entrada é armazenada como uma chave no dicionário "transitions" e o estado de destino é atribuído como o valor correspondente
for transition in dados['structure']['automaton']['transition']: 
    from_state = transition['from']
    to_state = transition['to']
    reads = transition['read'].split(", ")
    for read in reads:
        transitions[(from_state, read)] = to_state

# Variável com o caminho para o arquivo CSV de entrada de testes
automato_csv = 'arquivo_de_testes.csv'

# Lista para armazenar os dados do CSV
dados_csv = []

# Abre o arquivo CSV para leitura e lê os dados usando o leitor CSV e usando o delimitador ";" para separar as colunas
with open(automato_csv, 'r', newline='') as csvfile:
    reader = csv.reader(csvfile, delimiter=';')
    next(reader)  # Pula a primeira linha do cabeçalho (palavra de entrada;resultadoesperado)

    # Dentro do loop for, são lidas as linhas do arquivo e os resultados são armazenados na lista dados_csv
    for linha in reader:
        palavra_entrada, resultado_esperado = linha
        dados_csv.append((palavra_entrada, int(resultado_esperado)))

# Um novo arquivo CSV é criado para escrita e armazenamento dos resultados
with open('resultadoAFD.csv', 'w', newline='') as csvfile:
    # Escritor criado com o delimitador ";" especificado
    writer = csv.writer(csvfile, delimiter=';')
    # A primeira linha é escrita para representar o cabeçalho
    writer.writerow(['palavra de entrada', 'resultado esperado', 'resultado obtido', 'tempo de execução'])  # cabeçalho

    # Processa cada entrada de teste
    for palavra_entrada, resultado_esperado in dados_csv:
        # Inicio do processamento também representa o inicio da contagem de tempo
        inicio = time.time()
        estado_atual = 0  # Considerando que 0 é o estado inicial
        for caracter in palavra_entrada:
            estado_atual = transitions.get((estado_atual, caracter), None)
            if estado_atual is None:  # transição não definida
                break
        fim = time.time()
        # Após finalizar o processamento da entrada, obtém-se de novo o tempo e este é subtraído do inicial para que se possa ter o tempo de execução
        tempo_de_execucao = fim - inicio
        resultado_obtido = int(estado_atual == 2)  # Considerando que 2 é o estado de aceitação
        writer.writerow([palavra_entrada, resultado_esperado, resultado_obtido, tempo_de_execucao])

print("Resultado salvo em resultadoAFD.csv")
